import telebot
from telebot import types
import sqlite3
import random
import os

# –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
# –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞3
import os
TOKEN = os.getenv('BOT_TOKEN')
if not TOKEN:
    TOKEN = '8055975981:AAHo-Tv7XoWqXqWge_-tkgbYSAgupF0vm0U'  

bot = telebot.TeleBot(TOKEN)

# üóÉÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('game.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            name TEXT,
            best_score INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

# üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
def save_user(user_id, name):
    conn = sqlite3.connect('game.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, name, best_score)
        VALUES (?, ?, COALESCE((SELECT best_score FROM users WHERE user_id = ?), 0))
    ''', (user_id, name, user_id))
    conn.commit()
    conn.close()

# üéØ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    name = message.from_user.first_name

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    save_user(user_id, name)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn1 = types.KeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
    btn2 = types.KeyboardButton("üèÜ –ú–æ–π —Å—á—ë—Ç")
    markup.add(btn1, btn2)

    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø –∑–∞–≥–∞–¥–∞—é —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100 ‚Äî –ø–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!\n–ñ–º–∏ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'.",
        reply_markup=markup
    )

# üé≤ –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
@bot.message_handler(func=lambda message: message.text == "üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
def start_game(message):
    user_id = message.from_user.id

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–∏—Å–ª–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞
    bot.current_number = random.randint(1, 100)
    bot.attempts = 0

    bot.send_message(message.chat.id, "–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ö–∞–∫–æ–µ —á–∏—Å–ª–æ?")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî –æ–∂–∏–¥–∞–µ–º —á–∏—Å–ª–æ
    bot.register_next_step_handler(message, guess_number)

# üî¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏
def guess_number(message):
    user_id = message.from_user.id

    try:
        guess = int(message.text)
    except ValueError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ!")
        bot.register_next_step_handler(message, guess_number)
        return

    bot.attempts += 1

    if guess < bot.current_number:
        bot.reply_to(message, "–ë–æ–ª—å—à–µ! üìà")
        bot.register_next_step_handler(message, guess_number)
    elif guess > bot.current_number:
        bot.reply_to(message, "–ú–µ–Ω—å—à–µ! üìâ")
        bot.register_next_step_handler(message, guess_number)
    else:
        bot.reply_to(message, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª –∑–∞ {bot.attempts} –ø–æ–ø—ã—Ç–æ–∫!")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–æ—Ä–¥, –µ—Å–ª–∏ –ª—É—á—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
        update_score(user_id, bot.attempts)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        btn1 = types.KeyboardButton("üéÆ –°—ã–≥—Ä–∞—Ç—å –µ—â—ë")
        btn2 = types.KeyboardButton("üèÜ –ú–æ–π —Å—á—ë—Ç")
        markup.add(btn1, btn2)

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç –∏–≥—Ä–æ–∫–∞
def update_score(user_id, attempts):
    conn = sqlite3.connect('game.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∫–æ—Ä–¥
    cursor.execute('SELECT best_score FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    current_best = result[0] if result and result[0] > 0 else None

    # –ï—Å–ª–∏ —Ä–µ–∫–æ—Ä–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –ª—É—á—à–µ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º
    if not current_best or attempts < current_best:
        cursor.execute('UPDATE users SET best_score = ? WHERE user_id = ?', (attempts, user_id))

    conn.commit()
    conn.close()

# üèÜ –ü–æ–∫–∞–∑–∞—Ç—å —Å—á—ë—Ç
@bot.message_handler(func=lambda message: message.text == "üèÜ –ú–æ–π —Å—á—ë—Ç")
def show_score(message):
    user_id = message.from_user.id

    conn = sqlite3.connect('game.db')
    cursor = conn.cursor()
    cursor.execute('SELECT best_score FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()

    if result and result[0] > 0:
        bot.reply_to(message, f"üèÜ –¢–≤–æ–π –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result[0]} –ø–æ–ø—ã—Ç–æ–∫")
    else:
        bot.reply_to(message, "–¢—ã –µ—â—ë –Ω–µ —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ. –ù–∞–∂–º–∏ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'!")

# üîÑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–°—ã–≥—Ä–∞—Ç—å –µ—â—ë"
@bot.message_handler(func=lambda message: message.text == "üéÆ –°—ã–≥—Ä–∞—Ç—å –µ—â—ë")
def play_again(message):
    start_game(message)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    bot.infinity_polling(timeout=10, long_polling_timeout=5, skip_pending=True)
