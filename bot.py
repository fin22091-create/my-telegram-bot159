import telebot
from telebot import types
import json
import os

# –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
TOKEN = os.getenv('BOT_TOKEN')
bot = telebot.TeleBot(TOKEN)

# üìÅ –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
DATA_FILE = "user_data.json"

# üóÉÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        user_data = json.load(f)
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º user_id –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ int
        user_data = {int(k): v for k, v in user_data.items()}
else:
    user_data = {}  # { user_id: { "name": "–ê–ª–µ–∫—Å–µ–π", "color": "color_red" }, ... }

# üíæ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(user_data, f, ensure_ascii=False, indent=4)

# üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –∏–º—è —É–∂–µ –µ—Å—Ç—å ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ø–æ –∏–º–µ–Ω–∏
    if user_id in user_data and user_data[user_id].get("name"):
        name = user_data[user_id]["name"]
        bot.reply_to(message, f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}! üòä\n–ù–∞–ø–∏—à–∏ /myname, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è.")
    else:
        # –ï—Å–ª–∏ –∏–º–µ–Ω–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏
        msg = bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! üëã –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        bot.register_next_step_handler(msg, save_name)

# üìù –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
def save_name(message):
    user_id = message.from_user.id
    name = message.text.strip()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if user_id not in user_data:
        user_data[user_id] = {}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    user_data[user_id]["name"] = name
    save_data()  # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª

    bot.reply_to(message, f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! üòä\n–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ –ø–æ –∏–º–µ–Ω–∏.")

# üßæ –ö–æ–º–∞–Ω–¥–∞ /myname ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è
@bot.message_handler(commands=['myname'])
def handle_myname(message):
    user_id = message.from_user.id

    if user_id in user_data and user_data[user_id].get("name"):
        current_name = user_data[user_id]["name"]
        markup = types.InlineKeyboardMarkup()
        btn_change = types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="change_name")
        markup.add(btn_change)

        bot.reply_to(
            message,
            f"–¢–≤–æ—ë —Ç–µ–∫—É—â–µ–µ –∏–º—è: *{current_name}*",
            reply_markup=markup,
            parse_mode="Markdown"
        )
    else:
        msg = bot.reply_to(message, "–¢—ã –µ—â—ë –Ω–µ —É–∫–∞–∑–∞–ª —Å–≤–æ—ë –∏–º—è. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        bot.register_next_step_handler(msg, save_name)

# üîÑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è"
@bot.callback_query_handler(func=lambda call: call.data == "change_name")
def change_name_request(call):
    bot.answer_callback_query(call.id)
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è:")
    bot.register_next_step_handler(msg, update_name)

# üîÑ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏
def update_name(message):
    user_id = message.from_user.id
    new_name = message.text.strip()

    user_data[user_id]["name"] = new_name
    save_data()

    bot.reply_to(message, f"–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –∑–≤–∞—Ç—å —Ç–µ–±—è: {new_name} üòä")

# üé® –î–æ–±–∞–≤–∏–º –µ—â—ë –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ (–∫–∞–∫ –≤ –ø—Ä–æ—à–ª–æ–º —É—Ä–æ–∫–µ) ‚Äî —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫ —Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã—Ö
@bot.message_handler(commands=['color'])
def choose_color(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("üé® –ö—Ä–∞—Å–Ω—ã–π", callback_data="color_red")
    btn2 = types.InlineKeyboardButton("üåø –ó–µ–ª—ë–Ω—ã–π", callback_data="color_green")
    btn3 = types.InlineKeyboardButton("üíô –°–∏–Ω–∏–π", callback_data="color_blue")
    markup.add(btn1, btn2, btn3)

    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç:",
        reply_markup=markup
    )

# üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("color_"))
def handle_color_choice(call):
    user_id = call.from_user.id
    choice = call.data

    if user_id not in user_data:
        user_data[user_id] = {}

    user_data[user_id]["color"] = choice
    save_data()

    color_names = {
        "color_red": "–ö—Ä–∞—Å–Ω—ã–π",
        "color_green": "–ó–µ–ª—ë–Ω—ã–π",
        "color_blue": "–°–∏–Ω–∏–π"
    }

    bot.answer_callback_query(call.id, "–¶–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω! ‚úÖ")
    bot.send_message(
        call.message.chat.id,
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç ‚Äî {color_names[choice]}."
    )

# üìä –ö–æ–º–∞–Ω–¥–∞ /profile ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
@bot.message_handler(commands=['profile'])
def show_profile(message):
    user_id = message.from_user.id

    if user_id not in user_data:
        bot.reply_to(message, "–¢—ã –µ—â—ë –Ω–µ –≤–≤–æ–¥–∏–ª —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ. –ù–∞–ø–∏—à–∏ /start –∏ /color.")
        return

    name = user_data[user_id].get("name", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    color = user_data[user_id].get("color", "–Ω–µ –≤—ã–±—Ä–∞–Ω")
    color_names = {
        "color_red": "–ö—Ä–∞—Å–Ω—ã–π",
        "color_green": "–ó–µ–ª—ë–Ω—ã–π",
        "color_blue": "–°–∏–Ω–∏–π"
    }

    color_display = color_names.get(color, color)

    bot.reply_to(
        message,
        f"*–¢–í–û–ô –ü–†–û–§–ò–õ–¨*\n\n"
        f"üë§ *–ò–º—è:* {name}\n"
        f"üé® *–õ—é–±–∏–º—ã–π —Ü–≤–µ—Ç:* {color_display}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π /myname –∏ /color, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å.",
        parse_mode="Markdown"
    )

# üîÑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def echo_all(message):
    user_id = message.from_user.id
    name = user_data[user_id].get("name") if user_id in user_data else None

    if name:
        bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, {name}! üòä\n–ù–∞–ø–∏—à–∏ /profile, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.")
    else:
        bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
